plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
    id "jacoco"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.4")
}

dependencies {
	//DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation 'mysql:mysql-connector-java:8.0.33'

	//Web & Programming
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0-rc1'
	implementation 'com.bucket4j:bucket4j-core:8.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	//Test
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//vault
	//implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'

	//monitor
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	//QueryDsl
	def queryDslVersion = "6.0"
	implementation("io.github.openfeign.querydsl:querydsl-core:$queryDslVersion")
	implementation("io.github.openfeign.querydsl:querydsl-jpa:$queryDslVersion")
	annotationProcessor("io.github.openfeign.querydsl:querydsl-apt:$queryDslVersion:jpa")
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// elasticsearch
	implementation 'co.elastic.clients:elasticsearch-java:8.10.2'
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.1.3'
}

sourceSets {
	main {
		java {
			srcDirs += 'build/generated/sources/annotationProcessor/java/main'
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

/*tasks.withType(Test).configureEach {
	enabled = false
}*/

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required = false
		csv.required = false
		html.required = true
		html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
	}
	finalizedBy(tasks.jacocoTestCoverageVerification)
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true;
			element = 'CLASS'

			excludes = [
					'*.XXXApplication'
			]

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
	}
}